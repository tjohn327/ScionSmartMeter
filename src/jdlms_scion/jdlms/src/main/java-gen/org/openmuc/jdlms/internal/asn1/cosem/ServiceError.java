/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.ReverseByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrEnum;

public class ServiceError implements AxdrType {

    public byte[] code = null;

    public static enum Choices {
        _ERR_NONE_SELECTED(-1),
        APPLICATION_REFERENCE(0),
        HARDWARE_RESOURCE(1),
        VDE_STATE_ERROR(2),
        SERVICE(3),
        DEFINITION(4),
        ACCESS(5),
        INITIATE(6),
        LOAD_DATA_SET(7),
        TASK(9),;

        private int value;

        private Choices(int value) {
            this.value = value;
        }

        public int getValue() {
            return this.value;
        }

        public static Choices valueOf(long tagValue) {
            Choices[] values = Choices.values();

            for (Choices c : values) {
                if (c.value == tagValue) {
                    return c;
                }
            }
            return _ERR_NONE_SELECTED;
        }
    }

    private Choices choice;

    public AxdrEnum applicationReference = null;

    public AxdrEnum hardwareResource = null;

    public AxdrEnum vdeStateError = null;

    public AxdrEnum service = null;

    public AxdrEnum definition = null;

    public AxdrEnum access = null;

    public AxdrEnum initiate = null;

    public AxdrEnum loadDataSet = null;

    public AxdrEnum task = null;

    public ServiceError() {
    }

    public ServiceError(byte[] code) {
        this.code = code;
    }

    @Override
    public int encode(ReverseByteArrayOutputStream axdrOStream) throws IOException {
        if (code != null) {
            for (int i = code.length - 1; i >= 0; i--) {
                axdrOStream.write(code[i]);
            }
            return code.length;

        }
        if (choice == Choices._ERR_NONE_SELECTED) {
            throw new IOException("Error encoding AxdrChoice: No item in choice was selected.");
        }

        int codeLength = 0;

        if (choice == Choices.TASK) {
            codeLength += task.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(9);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.LOAD_DATA_SET) {
            codeLength += loadDataSet.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(7);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.INITIATE) {
            codeLength += initiate.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(6);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.ACCESS) {
            codeLength += access.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(5);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.DEFINITION) {
            codeLength += definition.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(4);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.SERVICE) {
            codeLength += service.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(3);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.VDE_STATE_ERROR) {
            codeLength += vdeStateError.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(2);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.HARDWARE_RESOURCE) {
            codeLength += hardwareResource.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(1);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        if (choice == Choices.APPLICATION_REFERENCE) {
            codeLength += applicationReference.encode(axdrOStream);
            AxdrEnum c = new AxdrEnum(0);
            codeLength += c.encode(axdrOStream);
            return codeLength;
        }

        // This block should be unreachable
        throw new IOException("Error encoding AxdrChoice: No item in choice was encoded.");
    }

    @Override
    public int decode(InputStream iStream) throws IOException {
        int codeLength = 0;
        AxdrEnum choosen = new AxdrEnum();

        codeLength += choosen.decode(iStream);
        resetChoices();
        this.choice = Choices.valueOf(choosen.getValue());

        if (choice == Choices.APPLICATION_REFERENCE) {
            applicationReference = new AxdrEnum();
            codeLength += applicationReference.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.HARDWARE_RESOURCE) {
            hardwareResource = new AxdrEnum();
            codeLength += hardwareResource.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.VDE_STATE_ERROR) {
            vdeStateError = new AxdrEnum();
            codeLength += vdeStateError.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.SERVICE) {
            service = new AxdrEnum();
            codeLength += service.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.DEFINITION) {
            definition = new AxdrEnum();
            codeLength += definition.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.ACCESS) {
            access = new AxdrEnum();
            codeLength += access.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.INITIATE) {
            initiate = new AxdrEnum();
            codeLength += initiate.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.LOAD_DATA_SET) {
            loadDataSet = new AxdrEnum();
            codeLength += loadDataSet.decode(iStream);
            return codeLength;
        }

        if (choice == Choices.TASK) {
            task = new AxdrEnum();
            codeLength += task.decode(iStream);
            return codeLength;
        }

        throw new IOException("Error decoding AxdrChoice: Identifier matched to no item.");
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        ReverseByteArrayOutputStream axdrOStream = new ReverseByteArrayOutputStream(encodingSizeGuess);
        encode(axdrOStream);
        code = axdrOStream.getArray();
    }

    public Choices getChoiceIndex() {
        return this.choice;
    }

    public void setApplicationReference(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.APPLICATION_REFERENCE;
        applicationReference = newVal;
    }

    public void setHardwareResource(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.HARDWARE_RESOURCE;
        hardwareResource = newVal;
    }

    public void setVdeStateError(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.VDE_STATE_ERROR;
        vdeStateError = newVal;
    }

    public void setService(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.SERVICE;
        service = newVal;
    }

    public void setDefinition(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.DEFINITION;
        definition = newVal;
    }

    public void setAccess(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.ACCESS;
        access = newVal;
    }

    public void setInitiate(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.INITIATE;
        initiate = newVal;
    }

    public void setLoadDataSet(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.LOAD_DATA_SET;
        loadDataSet = newVal;
    }

    public void setTask(AxdrEnum newVal) {
        resetChoices();
        choice = Choices.TASK;
        task = newVal;
    }

    private void resetChoices() {
        choice = Choices._ERR_NONE_SELECTED;
        applicationReference = null;
        hardwareResource = null;
        vdeStateError = null;
        service = null;
        definition = null;
        access = null;
        initiate = null;
        loadDataSet = null;
        task = null;
    }

    @Override
    public String toString() {
        if (choice == Choices.APPLICATION_REFERENCE) {
            return "choice: {applicationReference: " + applicationReference + "}";
        }

        if (choice == Choices.HARDWARE_RESOURCE) {
            return "choice: {hardwareResource: " + hardwareResource + "}";
        }

        if (choice == Choices.VDE_STATE_ERROR) {
            return "choice: {vdeStateError: " + vdeStateError + "}";
        }

        if (choice == Choices.SERVICE) {
            return "choice: {service: " + service + "}";
        }

        if (choice == Choices.DEFINITION) {
            return "choice: {definition: " + definition + "}";
        }

        if (choice == Choices.ACCESS) {
            return "choice: {access: " + access + "}";
        }

        if (choice == Choices.INITIATE) {
            return "choice: {initiate: " + initiate + "}";
        }

        if (choice == Choices.LOAD_DATA_SET) {
            return "choice: {loadDataSet: " + loadDataSet + "}";
        }

        if (choice == Choices.TASK) {
            return "choice: {task: " + task + "}";
        }

        return "unknown";
    }

}
