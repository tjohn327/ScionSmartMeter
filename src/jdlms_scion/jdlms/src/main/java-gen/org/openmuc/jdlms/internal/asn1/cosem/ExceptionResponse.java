/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.ReverseByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;

public class ExceptionResponse implements AxdrType {

    public byte[] code = null;
    public Enum stateError = null;

    public Enum serviceError = null;

    public ExceptionResponse() {
    }

    public ExceptionResponse(byte[] code) {
        this.code = code;
    }

    public ExceptionResponse(Enum stateError, Enum serviceError) {
        this.stateError = stateError;
        this.serviceError = serviceError;
    }

    @Override
    public int encode(ReverseByteArrayOutputStream axdrOStream) throws IOException {

        int codeLength;

        if (code != null) {
            codeLength = code.length;
            for (int i = code.length - 1; i >= 0; i--) {
                axdrOStream.write(code[i]);
            }
        }
        else {
            codeLength = 0;
            codeLength += serviceError.encode(axdrOStream);

            codeLength += stateError.encode(axdrOStream);

        }

        return codeLength;

    }

    @Override
    public int decode(InputStream iStream) throws IOException {
        int codeLength = 0;

        stateError = new Enum();
        codeLength += stateError.decode(iStream);

        serviceError = new Enum();
        codeLength += serviceError.decode(iStream);

        return codeLength;
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        ReverseByteArrayOutputStream axdrOStream = new ReverseByteArrayOutputStream(encodingSizeGuess);
        encode(axdrOStream);
        code = axdrOStream.getArray();
    }

    @Override
    public String toString() {
        return "sequence: {" + "stateError: " + stateError + ", serviceError: " + serviceError + "}";
    }

}
