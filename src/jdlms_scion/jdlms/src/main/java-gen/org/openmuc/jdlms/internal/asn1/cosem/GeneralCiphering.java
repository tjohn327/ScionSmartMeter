/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.jdlms.internal.asn1.cosem;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.ReverseByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.AxdrType;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrOctetString;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrOptional;

public class GeneralCiphering implements AxdrType {

    public byte[] code = null;
    public AxdrOctetString transactionId = null;

    public AxdrOctetString originatorSystemTitle = null;

    public AxdrOctetString recipientSystemTitle = null;

    public AxdrOctetString dateTime = null;

    public AxdrOctetString otherInformation = null;

    public AxdrOptional<KeyInfo> keyInfo = new AxdrOptional<>(new KeyInfo(), false);

    public AxdrOctetString cipheredContent = null;

    public GeneralCiphering() {
    }

    public GeneralCiphering(byte[] code) {
        this.code = code;
    }

    public GeneralCiphering(AxdrOctetString transactionId, AxdrOctetString originatorSystemTitle,
            AxdrOctetString recipientSystemTitle, AxdrOctetString dateTime, AxdrOctetString otherInformation,
            KeyInfo keyInfo, AxdrOctetString cipheredContent) {
        this.transactionId = transactionId;
        this.originatorSystemTitle = originatorSystemTitle;
        this.recipientSystemTitle = recipientSystemTitle;
        this.dateTime = dateTime;
        this.otherInformation = otherInformation;
        this.keyInfo.setValue(keyInfo);
        this.cipheredContent = cipheredContent;
    }

    @Override
    public int encode(ReverseByteArrayOutputStream axdrOStream) throws IOException {

        int codeLength;

        if (code != null) {
            codeLength = code.length;
            for (int i = code.length - 1; i >= 0; i--) {
                axdrOStream.write(code[i]);
            }
        }
        else {
            codeLength = 0;
            codeLength += cipheredContent.encode(axdrOStream);

            codeLength += keyInfo.encode(axdrOStream);

            codeLength += otherInformation.encode(axdrOStream);

            codeLength += dateTime.encode(axdrOStream);

            codeLength += recipientSystemTitle.encode(axdrOStream);

            codeLength += originatorSystemTitle.encode(axdrOStream);

            codeLength += transactionId.encode(axdrOStream);

        }

        return codeLength;

    }

    @Override
    public int decode(InputStream iStream) throws IOException {
        int codeLength = 0;

        transactionId = new AxdrOctetString();
        codeLength += transactionId.decode(iStream);

        originatorSystemTitle = new AxdrOctetString();
        codeLength += originatorSystemTitle.decode(iStream);

        recipientSystemTitle = new AxdrOctetString();
        codeLength += recipientSystemTitle.decode(iStream);

        dateTime = new AxdrOctetString();
        codeLength += dateTime.decode(iStream);

        otherInformation = new AxdrOctetString();
        codeLength += otherInformation.decode(iStream);

        keyInfo = new AxdrOptional<>(new KeyInfo(), false);
        codeLength += keyInfo.decode(iStream);

        cipheredContent = new AxdrOctetString();
        codeLength += cipheredContent.decode(iStream);

        return codeLength;
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        ReverseByteArrayOutputStream axdrOStream = new ReverseByteArrayOutputStream(encodingSizeGuess);
        encode(axdrOStream);
        code = axdrOStream.getArray();
    }

    @Override
    public String toString() {
        return "sequence: {" + "transactionId: " + transactionId + ", originatorSystemTitle: " + originatorSystemTitle
                + ", recipientSystemTitle: " + recipientSystemTitle + ", dateTime: " + dateTime + ", otherInformation: "
                + otherInformation + ", keyInfo: " + keyInfo + ", cipheredContent: " + cipheredContent + "}";
    }

}
