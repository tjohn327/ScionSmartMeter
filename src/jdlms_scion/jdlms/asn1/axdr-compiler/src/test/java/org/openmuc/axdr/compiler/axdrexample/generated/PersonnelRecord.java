/**
 * This class file was automatically generated by the AXDR compiler that is part of jDLMS (http://www.openmuc.org)
 */

package org.openmuc.axdr.compiler.axdrexample.generated;

import java.io.IOException;
import java.io.InputStream;
import org.openmuc.jasn1.ber.ReverseByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.*;
import org.openmuc.jdlms.internal.asn1.axdr.types.*;

public class PersonnelRecord implements AxdrType {

	public static class SubSeqOfChildren extends AxdrSequenceOf<ChildInformation> {

		protected ChildInformation createListElement() {
			return new ChildInformation();
		}
		protected SubSeqOfChildren(int length) {
			super(length);
		}
		public SubSeqOfChildren() {} // Call empty base constructor

	}

	public byte[] code = null;
	public Name name = null;

	public AxdrOptional<AxdrVisibleString> title = new AxdrOptional<AxdrVisibleString>(new AxdrVisibleString(), false);

	public EmployeeNumber number = null;

	public Date dateOfHire = null;

	public Name nameOfSpouse = null;

	public SubSeqOfChildren children = null;

	public AxdrDefault<AxdrBoolean> stillEmployed = new AxdrDefault<AxdrBoolean>(new AxdrBoolean(), new AxdrBoolean(true));

	public PersonnelRecord() {
	}

	public PersonnelRecord(byte[] code) {
		this.code = code;
	}

	public PersonnelRecord(Name name, AxdrVisibleString title, EmployeeNumber number, Date dateOfHire, Name nameOfSpouse, SubSeqOfChildren children, AxdrBoolean stillEmployed) {
		this.name = name;
		this.title.setValue(title);
		this.number = number;
		this.dateOfHire = dateOfHire;
		this.nameOfSpouse = nameOfSpouse;
		this.children = children;
		this.stillEmployed.setValue(stillEmployed);
	}

	public int encode(ReverseByteArrayOutputStream axdrOStream) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				axdrOStream.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += stillEmployed.encode(axdrOStream);
			
			codeLength += children.encode(axdrOStream);
			
			codeLength += nameOfSpouse.encode(axdrOStream);
			
			codeLength += dateOfHire.encode(axdrOStream);
			
			codeLength += number.encode(axdrOStream);
			
			codeLength += title.encode(axdrOStream);
			
			codeLength += name.encode(axdrOStream);
			
		}

		return codeLength;

	}

	public int decode(InputStream iStream) throws IOException {
		int codeLength = 0;

		name = new Name();
		codeLength += name.decode(iStream);

		title = new AxdrOptional<AxdrVisibleString>(new AxdrVisibleString(), false);
		codeLength += title.decode(iStream);

		number = new EmployeeNumber();
		codeLength += number.decode(iStream);

		dateOfHire = new Date();
		codeLength += dateOfHire.decode(iStream);

		nameOfSpouse = new Name();
		codeLength += nameOfSpouse.decode(iStream);

		children = new SubSeqOfChildren();
		codeLength += children.decode(iStream);

		stillEmployed = new AxdrDefault<AxdrBoolean>(new AxdrBoolean(), new AxdrBoolean(true));
		codeLength += stillEmployed.decode(iStream);

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream axdrOStream = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(axdrOStream);
		code = axdrOStream.getArray();
	}
	public String toString() {
		return "sequence: {"+ "name: " + name + ", title: " + title + ", number: " + number + ", dateOfHire: " + dateOfHire + ", nameOfSpouse: " + nameOfSpouse + ", children: " + children + ", stillEmployed: " + stillEmployed  + "}";
	}

}

