package org.openmuc.axdr.compiler.axdrexample;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openmuc.axdr.compiler.Compiler;
import org.openmuc.axdr.compiler.axdrexample.generated.ChildInformation;
import org.openmuc.axdr.compiler.axdrexample.generated.Date;
import org.openmuc.axdr.compiler.axdrexample.generated.EmployeeNumber;
import org.openmuc.axdr.compiler.axdrexample.generated.Gender;
import org.openmuc.axdr.compiler.axdrexample.generated.Name;
import org.openmuc.axdr.compiler.axdrexample.generated.PersonnelRecord;
import org.openmuc.axdr.compiler.axdrexample.generated.PersonnelRecord.SubSeqOfChildren;
import org.openmuc.jasn1.ber.ReverseByteArrayOutputStream;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrBoolean;
import org.openmuc.jdlms.internal.asn1.axdr.types.AxdrVisibleString;

public class X690AxdrExampleCodingTest {

    @BeforeClass
    public static void compile() throws Exception {
        System.out.println(new File(".").getAbsolutePath());

        String[] args = new String[] { "-o", "src/test/java/org/openmuc/axdr/compiler/axdrexample/generated", "-p",
                "org.openmuc.axdr.compiler.axdrexample.generated", "src/test/resources/x690AxdrExample.asn" };
        Compiler.main(args);

    }

    @Test
    public void encodingDecoding() throws IOException {

        Charset charset = Charset.forName("ISO-8859-1");

        ReverseByteArrayOutputStream axdrOS = new ReverseByteArrayOutputStream(1000);

        Name name = new Name(new AxdrVisibleString("Random".getBytes(charset)),
                new AxdrVisibleString("RG".getBytes(charset)), new AxdrVisibleString("Guy".getBytes(charset)));

        EmployeeNumber number = new EmployeeNumber(123456);

        Date dateOfHire = new Date("20120901".getBytes(charset));

        Name nameOfSpouse = new Name(new AxdrVisibleString("Melissa".getBytes(charset)),
                new AxdrVisibleString("MG".getBytes(charset)), new AxdrVisibleString("Guy".getBytes(charset)));

        SubSeqOfChildren children = new SubSeqOfChildren();

        children.add(new ChildInformation(
                new Name(new AxdrVisibleString("Junior".getBytes(charset)),
                        new AxdrVisibleString("JG".getBytes(charset)), new AxdrVisibleString("Guy".getBytes(charset))),
                new Date("20000604".getBytes(charset)), new Gender(Gender.MALE)));

        children.add(new ChildInformation(
                new Name(new AxdrVisibleString("Little".getBytes(charset)),
                        new AxdrVisibleString("LG".getBytes(charset)), new AxdrVisibleString("Guy".getBytes(charset))),
                new Date("20081028".getBytes(charset)), new Gender(Gender.FEMALE)));

        AxdrBoolean stillEmployed = new AxdrBoolean(true);

        PersonnelRecord psType = new PersonnelRecord(name, null, number, dateOfHire, nameOfSpouse, children,
                stillEmployed);

        // Encode PersonnelRecord and check against pre-computed byte array
        psType.encode(axdrOS);
        byte[] expectedBytes = new byte[] { (byte) 0x06, (byte) 0x52, (byte) 0x61, (byte) 0x6E, (byte) 0x64,
                (byte) 0x6F, (byte) 0x6D, (byte) 0x02, (byte) 0x52, (byte) 0x47, (byte) 0x03, (byte) 0x47, (byte) 0x75,
                (byte) 0x79, (byte) 0x00, (byte) 0x83, (byte) 0x01, (byte) 0xE2, (byte) 0x40, (byte) 0x08, (byte) 0x32,
                (byte) 0x30, (byte) 0x31, (byte) 0x32, (byte) 0x30, (byte) 0x39, (byte) 0x30, (byte) 0x31, (byte) 0x07,
                (byte) 0x4D, (byte) 0x65, (byte) 0x6C, (byte) 0x69, (byte) 0x73, (byte) 0x73, (byte) 0x61, (byte) 0x02,
                (byte) 0x4D, (byte) 0x47, (byte) 0x03, (byte) 0x47, (byte) 0x75, (byte) 0x79, (byte) 0x02, (byte) 0x06,
                (byte) 0x4A, (byte) 0x75, (byte) 0x6E, (byte) 0x69, (byte) 0x6F, (byte) 0x72, (byte) 0x02, (byte) 0x4A,
                (byte) 0x47, (byte) 0x03, (byte) 0x47, (byte) 0x75, (byte) 0x79, (byte) 0x08, (byte) 0x32, (byte) 0x30,
                (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x36, (byte) 0x30, (byte) 0x34, (byte) 0x01, (byte) 0x06,
                (byte) 0x4C, (byte) 0x69, (byte) 0x74, (byte) 0x74, (byte) 0x6C, (byte) 0x65, (byte) 0x02, (byte) 0x4C,
                (byte) 0x47, (byte) 0x03, (byte) 0x47, (byte) 0x75, (byte) 0x79, (byte) 0x08, (byte) 0x32, (byte) 0x30,
                (byte) 0x30, (byte) 0x38, (byte) 0x31, (byte) 0x30, (byte) 0x32, (byte) 0x38, (byte) 0x02,
                (byte) 0x00 };
        Assert.assertArrayEquals(expectedBytes, axdrOS.getArray());

        // Decode the generated byte array and check selected values
        ByteArrayInputStream bais = new ByteArrayInputStream(axdrOS.getArray());

        PersonnelRecord psType_decoded = new PersonnelRecord();
        psType_decoded.decode(bais);

        Assert.assertArrayEquals("20081028".getBytes(charset), psType_decoded.children.get(1).dateOfBirth.getValue());
        Assert.assertArrayEquals("Melissa".getBytes(charset), psType_decoded.nameOfSpouse.givenName.getValue());
        Assert.assertEquals(123456, psType_decoded.number.getValue());
        Assert.assertEquals(true, psType_decoded.stillEmployed.getValue().getValue());

        // Encode the decoded PersonnelRecord again. The resulting byte array
        // must be identical to the first.
        ReverseByteArrayOutputStream axdrOS2 = new ReverseByteArrayOutputStream(1000);
        psType_decoded.encode(axdrOS2);

        Assert.assertArrayEquals(axdrOS.getArray(), axdrOS2.getArray());
    }
}
